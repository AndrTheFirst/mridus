/// Set the `$sprite` map
/// @group sprite
$sprite: map-get($icons, sprite) !default;

/// Retrive an attributes value for a specific icon in the sprite map
/// @param {string} $icon - The name of the icon
/// @param {string} $attr - The attribute you wish to retrieve (e.g. width)
@function sprite-attr($icon, $attr) {
	$newIcon: map-get($icons, $icon);
	@if $newIcon == null {
		@warn "Can't find an icon with the name #{$icon}";
	}
	@return map-get($newIcon, $attr);
}

/// Create a map with the specified icon of attributes
/// @param {string} $icon - The name of the icon
@function icon-attr($icon) {
	$attr: (
			width: sprite-attr($icon, width),
			height: sprite-attr($icon, height),
			x: sprite-attr($icon, backgroundX),
			y: sprite-attr($icon, backgroundY)
	);

	@return $attr;
}

/// Assign the correct SVG background image and dimensions to the element
%sprite {
	display: inline-block;
	background-image: url(map-get($sprite, svgPath));
	background-size: map-get($sprite, width) map-get($sprite, height);
}

@mixin sprite($icon, $type: all) {
	@if $type == all {
		// Shares the backgrounds
		@extend %sprite;
	}

	$iconMap: icon-attr($icon);

	// Outputs dimensions in em
	@if $type == all or $type == size {
		width: map-get($iconMap, width);
		height: map-get($iconMap, height);
	}

	// Outputs background position in em
	@if $type == all or $type == bg {
		background-position: map-get($iconMap, x) map-get($iconMap, y);
	}

}